CREATE DATABASE CASESTUDEIES

USE CASESTUDEIES

SELECT * FROM FACT
SELECT * FROM LOCATION
SELECT * FROM PRODUCT



---1.Display the number of states present in the LocationTable. 


SELECT  COUNT(DISTINCT STATE)  FROM LOCATION
SELECT DISTINCT (STATE) FROM LOCATION

SELECT STATE FROM LOCATION


----2. How many products are of regular type?

SELECT * FROM PRODUCT WHERE TYPE LIKE 'REGULAR'

SELECT COUNT(*) FROM PRODUCT WHERE TYPE ='REGULAR'

---3. How much spending has been done on marketing of product ID1?

SELECT SUM(MARKETING) AS TOT_SP_MAR FROM FACT WHERE PRODUCTID=1

---4. What is the minimum sales of a product?

SELECT MIN(SALES) AS MIN_SAL FROM FACT

---5. Display the max Cost of Good Sold (COGS). 

SELECT MAX(COGS) AS MCGS FROM FACT

---6. Display the details of the product where product type is coffee.

SELECT * FROM PRODUCT WHERE PRODUCT_TYPE='COFFEE'

--7. Display the details where total expenses are greater than 40. 

SELECT * FROM FACT WHERE TOTAL_EXPENSES >40

---8. What is the average sales in area code 719?

SELECT AVG(SALES) AS AV_SALES FROM FACT WHERE AREA_CODE=719

--9. Find out the total profit generated by Colorado state

SELECT SUM(PROFIT) AS TOT_PROFIT FROM FACT JOIN  LOCATION
ON FACT.AREA_CODE=LOCATION.AREA_CODE
WHERE STATE ='Colorado'

--10. Display the average inventory for each product ID.

SELECT TOP 3*  FROM FACT
SELECT PRODUCTID , AVG(INVENTORY) AS AV_INV FROM FACT
GROUP BY PRODUCTID 
ORDER BY PRODUCTID 

--11. Display state in a sequential order in a Location Table.

SELECT * FROM LOCATION ORDER BY STATE ASC

--12. Display the average budget of the Product where the average budget
--margin should be greater than 100.

SELECT PRODUCTID, AVG(BUDGET_PROFIT) FROM FACT
GROUP BY PRODUCTID
HAVING AVG(BUDGET_MARGIN)>100


--13. What is the total sales done on date 2010-01-01?

SELECT SUM(SALES) FROM FACT WHERE DATE=' 2010-01-01'


--14. Display the average total expense of each product ID on an individual date.

SELECT PRODUCTID , AVG(TOTAL_EXPENSES) AS ATE FROM FACT 
GROUP BY PRODUCTID
ORDER BY PRODUCTID

--15. Display the table with the following attributes such as ate, productID, 
--product_type, product, sales, profit, state, area_code


SELECT f.Date, f.ProductID, p.Product_Type, p.Product, f.Sales, f.Profit, loc.[State], loc.Area_Code
FROM Fact f
INNER JOIN LOCATION LOC ON F.Area_Code=LOC.Area_Code
INNER JOIN PRODUCT P ON F.ProductId=P.ProductId

--16. Display the rank without any gap to show the sales wise rank. 

SELECT PRODUCTID, SALES, DENSE_RANK() OVER (ORDER BY SALES DESC) AS SALESRANK FROM FACT

--17. Find the state wise profit and sales.

SELECT STATE, SUM(PROFIT) AS SWP , SUM (SALES) AS SWS 
FROM FACT INNER JOIN LOCATION ON FACT.Area_Code=LOCATION.Area_Code
GROUP BY STATE


--18. Find the state wise profit and sales along with the productname.

SELECT STATE , PRODUCT, SUM(PROFIT) AS SWP , SUM (SALES) AS SWS 
FROM FACT INNER JOIN LOCATION ON FACT.Area_Code=LOCATION.Area_Code
INNER JOIN PRODUCT ON FACT.ProductId=Product.ProductId
GROUP BY STATE ,Product

--19. If there is an increase in sales of 5%, calculate the increasedsales. 

SELECT TOP 1* FROM FACT 

SELECT SALES , SALES *1.05 AS INC_SALES FROM FACT 

SELECT SALES*1.05 AS INC_SALES , SALES FROM FACT

--20. Find the maximum profit along with the product ID and producttype

SELECT P.PRODUCTID ,P. Product_TYPE , MAX(F.PROFIT) AS MAX_PROFITT FROM PRODUCT P
INNER JOIN FACT F ON P.PRODUCTID=F.PRODUCTID
GROUP BY P.PRODUCTID , P.PRODUCT_TYPE
ORDER BY ProductId ASC


--21. Create a stored procedure to fetch the result according to the product typefrom Product Table.

CREATE PROC CASESTUDY01 ( @X NVARCHAR(100))
AS 
BEGIN
SELECT * FROM PRODUCT WHERE Product_Type=@X
END

EXEC CASESTUDY01 'COFFEE'



--22. Write a query by creating a condition in which if the total expenses is lessthan60 then it is a
--profit or else loss. 

SELECT * FROM FACT

SELECT PRODUCTID, TOTAL_EXPENSES ,
CASE
         WHEN TOTAL_EXPENSES > 60 THEN 'IT IS A LOSS'
		 WHEN TOTAL_EXPENSES < 60 THEN 'IT IS A PROFIT'
		 ELSE 'NO PROFIT NO LOSS'
		 END AS [PROFIT/LOSS]
		
FROM FACT


SELECT * ,
CASE
         WHEN TOTAL_EXPENSES > 60 THEN 'IT IS A LOSS'
		 WHEN TOTAL_EXPENSES < 60 THEN 'IT IS A PROFIT'
		 ELSE 'NO PROFIT NO LOSS'
		 END
FROM FACT

--23. Give the total weekly sales value with the date and product IDdetails.
--Useroll-up to pull the data in hierarchical order. 

SELECT 
    PRODUCTID, 
    DATEPART(WEEK,[DATE] ) AS Week, 
    SUM(SALES) AS Total_Weekly_Sales
FROM 
    FACT
GROUP BY 
    ROLLUP(PRODUCTID,  DATEPART(WEEK ,[DATE]))

--24. APply union and intersection operator on the tables which consist of
--attribute area code.

SELECT AREA_CODE AS UNION_ATTRIFROMFACT FROM FACT
UNION
SELECT AREA_CODE AS UNION_ATTRIFROMPRODUCT FROM LOCATION


SELECT AREA_CODE AS UNION_ATTRIFROMFACT FROM FACT
INTERSECT
SELECT AREA_CODE AS UNION_ATTRIFROMPRODUCT FROM LOCATION

--25. Create a user-defined function for the product table to fetch a particular
--product type based upon the user’s preference.

CREATE FUNCTION CASESTUDY001 (@X INT)
RETURNS INT
AS
BEGIN
 DECLARE @Y NVARCHAR(100)
 select @Y=PRODUCT_TYPE
 FROM PRODUCT
 WHERE PRODUCTID=@X
 RETURN @Y
END

SELECT DBO.CASESTUDY001 (5)


--26. Change the product type from coffee to tea where product IDis 1 andundoit.

BEGIN TRANSACTION

UPDATE PRODUCT 
SET PRODUCT_TYPE='TEA' WHERE PRODUCT_TYPE='COFFEE'


SELECT * FROM PRODUCT

ROLLBACK


--27. Display the date, product ID and sales where total expenses are-
--between 100 to 200.

SELECT DATE ,PRODUCTID,SALES FROM FACT WHERE Total_Expenses BETWEEN 100 AND 200

--28. Delete the records in the Product Table for regular type.

DELETE FROM PRODUCT WHERE TYPE='REGULAR'



--29. Display the ASCII value of the fifth character from the columnProduct


   SELECT ASCII(SUBSTRING(Product, 5, 1)) AS ASCIIValue FROM Product
